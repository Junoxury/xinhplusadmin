# 프로젝트 가이드라인

이 프로젝트는 성형관리를 위한 React 기반 어드민 플랫폼입니다.

## 기술 스택
- Next.js를 프레임워크로 사용
- TypeScript로 타입 안정성 확보
- TailwindCSS로 스타일링
- shadcn/ui를 컴포넌트 라이브러리로 사용
- React Query로 서버 상태 관리
- Supabase를 데이터베이스로 사용

## UI 컴포넌트
- shadcn/ui 컴포넌트를 기본으로 사용
- 커스텀 스타일링은 기존 shadcn 컴포넌트의 변형으로 구현
- 새로운 UI 컴포넌트 제작시 shadcn의 디자인 시스템 준수

## shadcn 설치 및 사용 규칙
- shadcn 컴포넌트 설치시 @shadcn-ui가 아닌 shadcn 명령어 사용
  ```bash
  # ❌ 잘못된 설치 방법
  npm install @shadcn-ui/button
  
  # ✅ 올바른 설치 방법
  npx shadcn-ui add button
  npx shadcn-ui add dialog
  npx shadcn-ui add dropdown-menu
  ```
- 설치된 컴포넌트는 /components/ui 디렉토리에 위치
- shadcn 컴포넌트 커스터마이징은 components.json 설정 사용
- Tailwind 설정은 shadcn 권장 설정 준수

## 코드 구조
다음과 같은 디렉토리 구조를 사용합니다:
/src
  /components
    /common      # 재사용 가능한 컴포넌트
    /layout      # 레이아웃 컴포넌트
    /admin       # 어드민 전용 컴포넌트
  /pages        # Next.js 페이지
  /hooks        # 커스텀 훅
  /services     # API 서비스
  /types        # TypeScript 타입
  /utils        # 유틸리티 함수

## 명명 규칙
- 컴포넌트: 파스칼케이스 사용 (예: HospitalList)
- 함수: 카멜케이스 사용 (예: fetchHospitalData)
- 파일명: 케밥케이스 사용 (예: hospital-list.tsx)
- 타입/인터페이스: 파스칼케이스에 접두어 사용 (예: THospital, IHospitalData)

## 개발 지원 AI 사용 가이드
- AI 응답에는 항상 AI 아이콘을 앞에 표시 (🤖 또는 🎯)
- AI 응답 형식 예시:
  ```
  🤖 안녕하세요, 문의하신 내용에 대해 답변드리겠습니다...
  
  🤖 요청하신 코드를 생성했습니다...
  
  🤖 다음과 같이 수정하시면 됩니다...
  ```
- AI 응답은 한국어로 작성
- 코드 생성 시 상세한 설명 포함
- 에러 해결 시 단계별 해결 방법 제시
- 모든 코드는 프로젝트 가이드라인 준수

## 컴포넌트 구조
- 각 컴포넌트는 독립적인 디렉토리를 가집니다
- Next.js App Router 규칙 준수
  - 페이지 컴포넌트: page.tsx
  - 레이아웃 컴포넌트: layout.tsx
  - 로딩 UI: loading.tsx
  - 에러 처리: error.tsx
  - 클라이언트 컴포넌트: client-컴포넌트명.tsx
- 컴포넌트 디렉토리 구조:
  ```
  /components
    /hospital
      page.tsx        # 페이지 컴포넌트
      types.ts        # 타입 정의
      client-form.tsx # 클라이언트 컴포넌트
      utils.ts        # 유틸리티 함수

## 상태 관리
- 서버 상태는 React Query 사용
- 전역 UI 상태는 React Context 사용
- 가능한 한 로컬 상태를 사용합니다

## 인증 및 권한 처리
- Next.js 미들웨어를 사용한 인증 필수 구현
  ```typescript
  // middleware.ts 파일 위치: src/middleware.ts
  export const config = {
    matcher: [
      /*
       * 로그인 페이지, 에러 페이지 등을 제외한 모든 페이지 매칭
       * api 라우트에도 인증 미들웨어 적용
       */
      '/((?!api/auth|_next/static|_next/image|favicon.ico|login).*)',
    ],
  }
  ```

- 인증 상태 관리
  - 로그인 상태는 서버 컴포넌트에서 확인
  - 세션 또는 JWT 토큰 사용
  - 인증 실패시 로그인 페이지로 자동 리다이렉트

- 레이아웃 레벨 보호
  ```typescript
  // app/admin/layout.tsx
  import { redirect } from 'next/navigation'
  
  export default async function AdminLayout({
    children,
  }: {
    children: React.ReactNode
  }) {
    const session = await getServerSession()
    if (!session) {
      redirect('/login')
    }
    return <>{children}</>
  }
  ```

- 페이지 접근 권한
  - 관리자 권한 레벨에 따른 접근 제어
  - 권한 없는 페이지 접근시 403 페이지 표시
  - 메뉴 표시 여부도 권한에 따라 제어

- 로그인 상태 클라이언트 활용
  ```typescript
  // hooks/useAuth.ts
  import { useSession } from 'next-auth/react'
  
  export const useAuth = () => {
    const { data: session, status } = useSession()
    const isAuthenticated = status === 'authenticated'
    return {
      isAuthenticated,
      user: session?.user,
      status,
    }
  }
  ```

- API 요청 인증 처리
  - axios 인터셉터로 자동 토큰 주입
  - 토큰 만료시 자동 갱신 처리
  - 인증 실패시 로그인 페이지 리다이렉트
- 모든 API 호출은 services 디렉토리에 위치
- HTTP 요청은 axios 사용
- 적절한 에러 처리 구현
- 요청/응답에 대한 타입 정의 필수

## 데이터 연동 작업 규칙
- 프론트엔드 UI가 완성된 후 데이터 연동 시 기존 디자인 변경 금지
- 레이아웃과 스타일링은 그대로 유지하며 데이터만 연동
- shadcn 컴포넌트의 기본 동작과 스타일 유지
- 데이터 로딩 상태는 기존 UI에 스켈레톤 또는 로딩 스피너 추가
- 에러 상태는 Toast 또는 Alert 컴포넌트로 표시
- 페이지네이션, 정렬, 필터링은 서버 사이드로 구현

## Supabase 데이터베이스 사용 규칙
- 기본 CRUD 작업은 Supabase Client 직접 쿼리 사용
  ```typescript
  const { data, error } = await supabase
    .from('테이블명')
    .select('*')
  ```

- 복잡한 로직은 RPC(Stored Procedures) 사용
  ```typescript
  const { data, error } = await supabase
    .rpc('함수명', { 파라미터 })
  ```

- RPC 사용이 권장되는 경우:
  - 다중 테이블 조인 필요시
  - 복잡한 비즈니스 로직 처리시
  - 배치 작업 수행시
  - 성능 최적화가 필요한 경우

- 실시간 데이터 업데이트가 필요한 경우 Supabase Realtime 사용
- 모든 데이터베이스 작업은 타입 안정성 보장을 위해 생성된 타입 사용
- 환경변수로 Supabase 접근 키 관리

## 스타일링 가이드
- Tailwind CSS로 스타일링
- 모바일 퍼스트 접근
- 커스텀 스타일은 CSS 모듈 사용
- 디자인 시스템 토큰 준수

## 문서화
- 컴포넌트에 JSDoc 주석 추가
- 복잡한 비즈니스 로직 문서화
- README 최신 상태 유지
- API 엔드포인트 문서화

## 에러 처리
- 에러 바운더리 구현
- 적절한 에러 로깅
- 사용자 친화적인 에러 메시지 표시
- API 에러 처리

## 성능 최적화
- 코드 스플리팅 구현
- 이미지 최적화
- React 훅 적절히 사용
- 번들 크기 최소화

## 접근성
- 시맨틱 HTML 사용
- ARIA 레이블 적절히 추가
- 키보드 네비게이션 보장
- 스크린 리더 테스트

## 보안
- 모든 사용자 입력 데이터 검증
- XSS 공격 방지
- API 요청에 적절한 인증 추가
- 민감한 정보는 환경변수로 관리

## 배포 및 버전 관리
- 시맨틱 버저닝 사용
- 배포 전 체크리스트 준수
- 환경별 설정 분리
- 배포 자동화 구현