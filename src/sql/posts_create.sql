-- 게시글 상태를 위한 enum 타입 생성
CREATE TYPE post_status AS ENUM ('draft', 'published', 'archived', 'deleted');

-- posts 테이블 생성
CREATE TABLE posts (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  thumbnail_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  published_at TIMESTAMPTZ,
  status post_status DEFAULT 'draft',
  view_count INTEGER DEFAULT 0,
  like_count INTEGER DEFAULT 0,
  comment_count INTEGER DEFAULT 0,
  author_id UUID,
  slug VARCHAR(255) UNIQUE,
  meta_description TEXT
);

-- 태그 테이블 생성
CREATE TABLE tags (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name VARCHAR(50) NOT NULL,
  slug VARCHAR(50) UNIQUE NOT NULL,
  post_count INTEGER DEFAULT 0
);

-- posts_tags 중간 테이블 생성
CREATE TABLE posts_tags (
  post_id bigint,
  tag_id bigint,
  PRIMARY KEY (post_id, tag_id)
);

-- 좋아요 테이블 생성
CREATE TABLE post_likes (
  post_id bigint,
  user_id UUID,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (post_id, user_id)
);

-- 댓글 테이블 생성
CREATE TABLE post_comments (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  post_id bigint,
  user_id UUID,
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  parent_id bigint,
  is_deleted BOOLEAN DEFAULT FALSE
);

-- 인덱스 생성
CREATE INDEX idx_posts_published_at ON posts(published_at);
CREATE INDEX idx_posts_status ON posts(status);
CREATE INDEX idx_posts_author ON posts(author_id);
CREATE INDEX idx_posts_slug ON posts(slug);
CREATE INDEX idx_tags_slug ON tags(slug);
CREATE INDEX idx_post_comments_post_id ON post_comments(post_id);
CREATE INDEX idx_post_comments_parent_id ON post_comments(parent_id);

-- 트리거 함수 생성
CREATE OR REPLACE FUNCTION update_post_counts()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    UPDATE tags 
    SET post_count = post_count + 1 
    WHERE id IN (SELECT tag_id FROM posts_tags WHERE post_id = NEW.post_id);
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE tags 
    SET post_count = post_count - 1 
    WHERE id IN (SELECT tag_id FROM posts_tags WHERE post_id = OLD.post_id);
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- 트리거 생성
CREATE TRIGGER update_tag_post_count
AFTER INSERT OR DELETE ON posts_tags
FOR EACH ROW
EXECUTE FUNCTION update_post_counts();

-- 자동 updated_at 업데이트를 위한 트리거
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_posts_updated_at
    BEFORE UPDATE ON posts
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_comments_updated_at
    BEFORE UPDATE ON post_comments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 